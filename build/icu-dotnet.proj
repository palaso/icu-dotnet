<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<IsOnWindows Condition="'$(OS)'=='Windows_NT'">true</IsOnWindows>
		<IsOnTeamCity Condition="'$(teamcity_version)' != ''">true</IsOnTeamCity>

		<RootDir Condition="'$(IsOnTeamCity)'!='true' Or '$(IsOnWindows)'!='true'">$(MSBuildProjectDirectory)\..</RootDir>
		<RootDir Condition="'$(IsOnTeamCity)'=='true' And '$(IsOnWindows)'=='true'">$(teamcity_build_checkoutDir)</RootDir>
		<teamcity_agent_home_dir Condition="'$(teamcity_agent_home_dir)'=='' And '$(IsOnWindows)'!='true'">/var/lib/TeamCity/agent</teamcity_agent_home_dir>
		<Solution>icu.net.sln</Solution>
		<SolutionDir>$(RootDir)/source</SolutionDir>
		<OutputDir>$(RootDir)/output</OutputDir>
		<excludedCategories>ICU50 Deprecated;ByHand;</excludedCategories>
		<excludedCategories Condition="'$(IsOnWindows)'!='true'">$(excludedCategories)KnownMonoIssue;</excludedCategories>
		<Configuration Condition="'$(IsOnWindows)'!='true' And '$(Configuration)'==''">ReleaseMono</Configuration>
		<Configuration Condition="'$(IsOnWindows)'=='true' And '$(Configuration)'==''">Release</Configuration>

		<DotNetCLI Condition="'$(DotNetCLI)' == ''">dotnet</DotNetCLI>
		<BuildNetCore Condition="'$(BuildNetCore)' == ''">true</BuildNetCore>
		<SolutionNetCore>icu.net.netstandard.sln</SolutionNetCore>
		<SolutionNetCorePath Condition="'$(BuildNetCore)' == 'true'">$(SolutionDir)/$(SolutionNetCore)</SolutionNetCorePath>
	</PropertyGroup>

	<!-- NOTE: this project uses GitVersion (http://gitversion.readthedocs.io) to set the version number. -->
	<!-- To increment the version number create and push a new tag in git -->

	<UsingTask TaskName="NUnit" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="NUnitTeamCity"
		AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)"
		Condition=" '$(IsOnTeamCity)'=='true' And '$(IsOnWindows)'=='true'"/>
	<UsingTask TaskName="NUnitTeamCity"
		AssemblyFile="$(teamcity_agent_home_dir)/plugins/dotnetPlugin/bin/JetBrains.BuildServer.MSBuildLoggers.dll"
		Condition=" '$(IsOnTeamCity)'=='true' And '$(IsOnWindows)'!='true'"/>

	<Import Project="NuGet.targets"/>

	<ItemGroup>
		<AllBuildDependencyTasksFiles Include="$(SolutionDir)/packages/BuildDependencyTasks*/**"/>
		<AllBuildDependencyTasksDirs Include="@(AllBuildDependencyTasksFiles->'%(RootDir)%(Directory)')"/>
	</ItemGroup>

	<Target Name="RemoveOldBuildDependencyTaskPackages">
		<!-- Delete BuildDependencyTasks.* package directories so that we end up with having only the desired version -->
		<!-- NOTE: because of limited functionality of msbuild on Linux we always delete the directories even when we have only one. -->
		<RemoveDir Directories="@(AllBuildDependencyTasksDirs)" />
	</Target>

	<Target Name="DownloadDependencies" DependsOnTargets="RemoveOldBuildDependencyTaskPackages;RestorePackages">
		<MSBuild
			Projects="DownloadDeps.targets"
			Targets="DownloadDependenciesTarget"
			Properties="Configuration=$(Configuration);RootDir=$(RootDir);SolutionDir=$(SolutionDir)" />
	</Target>

	<Target Name="Build">
		<CallTarget Targets="Clean"/>
		<CallTarget Targets="Compile"/>
		<Message Text="Build Complete"/>
	</Target>

	<Target Name="Compile" DependsOnTargets="DownloadDependencies;RestorePackages">
		<PropertyGroup>
			<ConfigurationNetCore>$(Configuration.Replace('Mono',''))</ConfigurationNetCore>
		</PropertyGroup>
		<MSBuild Projects="$(SolutionDir)/$(Solution)"
			Targets="Rebuild"
			Properties="Configuration=$(Configuration)" />
	</Target>

	<Target Name="CompileNetCore" DependsOnTargets="DownloadDependencies;RestorePackages"
		Condition="'$(BuildNetCore)' == 'true'">
		<PropertyGroup>
			<CoreBuildArguments>/t:Build;Pack /p:Configuration=$(ConfigurationNetCore) "$(SolutionNetCorePath)"</CoreBuildArguments>
		</PropertyGroup>

		<Exec Command='$(DotNetCLI) msbuild $(CoreBuildArguments)'/>
	</Target>

	<ItemGroup>
		<ExistingObjectFiles
			Include="$(OutputDir)/$(Configuration)/**/*"
			Exclude="$(RootDir)/.hg/**/*;$(RootDir)/.git/**/*"
		/>
	</ItemGroup>

	<Target Name="Clean">
		<Delete Files="@(ExistingObjectFiles)" />
		<Delete Condition="'$(IsOnWindows)'=='true'"
			 Files="$(RootDir)/**/obj/**/*" />
		<Exec Condition="'$(IsOnWindows)'!='true'"
			Command="find . %5c( -name obj -o -name bin -o -name test-results %5c) -type d -print0 | xargs -0 rm -rf"
			WorkingDirectory="$(RootDir)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<CallTarget Targets="TestOnly"/>
	</Target>

	<Target Name="TestOnly" DependsOnTargets="RunNUnitTC;RunNUnit;RunNUnitNetCore"/>

	<Target Name="RunNUnitTC" Condition="'$(IsOnTeamCity)'=='true'">
		<ItemGroup>
			<TestAssemblies Include="$(OutputDir)/$(Configuration)/*tests.dll"/>
		</ItemGroup>

		<NUnitTeamCity
			Assemblies="@(TestAssemblies)"
			ExcludeCategory="$(excludedCategories)SkipOnTeamCity;$(ExtraExcludeCategories)"
			NUnitVersion="NUnit-2.6.4" />
	</Target>

	<Target Name="RunNUnit" Condition="'$(IsOnTeamCity)'!='true'">
		<ItemGroup>
			<TestAssemblies Include="$(OutputDir)/$(Configuration)/*tests.dll"/>
		</ItemGroup>

		<NUnit Assemblies="@(TestAssemblies)"
			ToolPath="$(SolutionDir)/packages/NUnit.Runners.Net4.2.6.4/tools"
			TestInNewThread="false"
			ExcludeCategory="$(excludedCategories)$(ExtraExcludeCategories)"
			WorkingDirectory="$(OutputDir)/$(Configuration)"
			Force32Bit="false"
			Verbose="true"
			OutputXmlFile="$(OutputDir)/$(Configuration)/TestResults.xml"/>
	</Target>

	<Target Name="RunNUnitNetCore" Condition="'$(BuildNetCore)' == 'true'">
		<PropertyGroup>
			<NetCoreTestRunner>$(SolutionDir)/icu.net.netstandard.testrunner</NetCoreTestRunner>
		</PropertyGroup>
		<Exec Command="$(DotNetCLI) run --result=$(OutputDir)/$(Configuration)/TestResults.NetCore.xml"
			WorkingDirectory="$(NetCoreTestRunner)" />
	</Target>
</Project>